Shader "Shader Forge/lambert_phong" {
    Properties {
        _MainCol("颜色", color) = (1.0, 1.0, 1.0, 1.0)
        _SpecularPow("高光次幂", range(1, 90)) = 30
    }
    SubShader {
        Tags {
            "RenderType"="Opaque"
        }
        Pass {
            Name "FORWARD"
            Tags {
                "LightMode"="ForwardBase"
            }
            
            
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #include "UnityCG.cginc"
            #pragma multi_compile_fwdbase_fullshadows
            #pragma target 3.0

            // 输入参数
            uniform float3 _MainCol;
            uniform float _SpecularPow;
            // 输入结构
            struct VertexInput {
                float4 vertex : POSITION;   // 输入模型顶点信息
                float3 normal : NORMAL;     // 输入模型法线信息
            };
            // 输出结构
            struct VertexOutput {
                float4 posCS : SV_POSITION;   // 由模型顶点信息换算而来的顶点屏幕位置
                float3 nDirWS : TEXCOORD0;    // 由模型法线信息换算而来的世界空间法线信息
                float3 posWS : TEXCOORD1;     // 世界空间顶点位置
            };
            // 输入结构>>>顶点Shader>>>输出结构
            VertexOutput vert (VertexInput v) {
                VertexOutput o = (VertexOutput)0;                   // 新建一个输出结构
                    o.posCS = UnityObjectToClipPos( v.vertex );     // 变换顶点信息 OS>CS
                    o.posWS = mul(unity_ObjectToWorld, v.vertex);   // 变换顶点位置 OS>WS
                    o.nDirWS = UnityObjectToWorldNormal(v.normal);  // 变换法线信息
                return o;                                           // 将输出结构 输出
            }
            // 输出结构>>>像素Shader
            float4 frag(VertexOutput i) : COLOR {
                    //数据准备
                    float3 nDir = i.nDirWS;
                    float3 lDir = normalize(_WorldSpaceLightPos0.xyz);
                    float3 vDir = normalize(_WorldSpaceCameraPos.xyz - i.posWS.xyz);
                    float3 rDir = normalize(reflect(-1.0*lDir, nDir));
                    //中间数据
                    float rDotv = dot(rDir, vDir);
                    float nDotl = dot(nDir, lDir);
                    //计算光照模型
                    float lambert = max(0.0, nDotl);
                    float phong = pow(max(0.0, rDotv), _SpecularPow);
                    float3 finalRGB = _MainCol * lambert + phong;
                    //返回结果
                    return float4 (finalRGB , 1.0);
            }
            ENDCG
        }
    }
    FallBack "Diffuse"
}
